React es una librer�a creada por Facebook (2013 lliberada), para crear las UI de las aplicaciones web basadas en componentes.

Caracter�sticas:

1. Los datos fluyen en un sentido desde el primer al �ltimo componente.
2. Usa un algoritmo para detectar cambios y solo aplicar esas modificaciones a la UI. (Virtual DOM). No genera de nuevo todo el 
html sino que aplica peque�os cambios. Ahora tenemos un nuevo estado de la aplicaci�n (c�mo se tiene que ver ahora).
3. Utiliza JS para crear componentes pero para facilitar esto extendieron el lenguaje creando JSX. (JSX es una extensi�n de javascript que 
permite usar html en el c�digo JS).
(Todo React es javascript y �ste se usa para crear componentes).
4. Permite generar cualquier tipo de UI como web, mobile, canvas, televisores, terminales, etc.
5. Propone usar programaci�n funcional y manejar estructuras de datos inmutables. (Se crea un nuevo listado de datos cada vez que cambia
el estado por lo que es m�s f�cil volve al estado anterior).
6. Se puede usar junto a Angular o Ember.

�Qu� es y c�mo funciona el Virtual DOM?

1. El virtual DOM es una representaci�n de todos los objetos que componen la UI usando un objeto de JS.
2. Todos los componentes creados por React deben comenzar con may�scula. Los elementos nativos de HTML est�n en min�scula 
por lo podremos facilmente identificarlos.
3. El algoritmo de React permite que se hagan cambios de manera efectiva en el DOM. Es un algoritmo de diferencias de lo que hay y lo que va a venir luego.

Creaci�n de componentes:

Debemos pensar nuestra aplicaci�n como un conjunto de componentes, que siguen la filosof�a de separaci�n de responsabilidades.
En los componentes de react, todo es JS.

Para crear un componente podemos:
1. Crear un componente puro con una funci�n
2. Usar class y extender desde React.Component (Tenemos m�s funcionalidad y tenemos acceso a los estados)
3. Usar class y extender desde React.PureComponent
4. Usar React.createClass()

El m�todo render es obligatorio para todos los componentes hechos con clases.
Al usar clases accedemos directamente al props con this.props.
Si hay que hacer un bind es mejor hacerlo en el contructor del componente para evitar problemas de rendimiento.

Un PureComponent valida los props y el state y solo renderiza cuando cambia el state. No se debe usar mucho ya que 
si un PureComponent tiene dentro otro componente que no es Pure y este cambia, el PureComponent no se entera y 
por lo tanto no renderiza de nuevo. Se usan PureComponent en los �ltimos nodos. 

Se recomienda crear componentes bien como funciones puras o como clases.

Ciclo de vida de un componente:

Todos los componentes tienen momento.

FASES DEL CICLO DE VIDA

MONTADO:
Constructor(): recibe los props, definir estado
conponentWillMount(): Permite ejecutar codigo antes de que el componente se renderice. Aun no esta el DOM, no se deben hacer peticiones sincronas
render(): dibujamos el dom
componentDidMount: Despues que la aplicacion se monta. Es el sitio para hacer peticiones HTTP. Con la respuesta se puede modificar el estado 
y si esto ocurre en este metodo el componente se vuelve a renderizar.

ACTUALIZACION:
componentWillReceiveProps(nextProps): comprobar si los props han cambiado.
shouldComponentUpdate(nextProps, nextState): prueba si es necesario actualizar el componente
componentWillUpdate(nextProps, nextState): el componente sera montado
render(): Renderiza la aplicacion
componenteDidUpdate(prevProps, prevstate): podemos volver a asignar algo

DESMONTADO:
componentWillUnmount(): Limpiar eventos o eliminar algunas cosas


